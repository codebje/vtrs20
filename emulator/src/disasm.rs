pub fn disasm(opcodes: &[u8]) -> String {
    match opcodes[0] {
        0b00_000_000 => "nop".to_string(),
        0b00_000_001 => format!("ld\tbc, ${:02x}{:02x}", opcodes[2], opcodes[1]),
        0b00_000_010 => "ld\t(bc), a".to_string(),
        0b00_000_011 => "inc\tbc".to_string(),
        0b00_000_100 => "inc\tb".to_string(),
        0b00_000_101 => "dec\tb".to_string(),
        0b00_000_110 => format!("ld\tb, ${:02x}", opcodes[1]),
        0b00_000_111 => "rlca".to_string(),

        0b00_001_000 => "ex\taf, af'".to_string(),
        0b00_001_001 => "add\thl, bc".to_string(),
        0b00_001_010 => "ld\ta, (bc)".to_string(),
        0b00_001_011 => "dec\tbc".to_string(),
        0b00_001_100 => "inc\tc".to_string(),
        0b00_001_101 => "dec\tc".to_string(),
        0b00_001_110 => format!("ld\tc, ${:02x}", opcodes[1]),
        0b00_001_111 => "rrca".to_string(),

        0b00_010_000 => format!("djnz\t{}", opcodes[1] as i8),
        0b00_010_001 => format!("ld\tde, ${:02x}{:02x}", opcodes[2], opcodes[1]),
        0b00_010_010 => "ld\t(de), a".to_string(),
        0b00_010_011 => "inc\tde".to_string(),
        0b00_010_100 => "inc\td".to_string(),
        0b00_010_101 => "dec\td".to_string(),
        0b00_010_110 => format!("ld\td, ${:02x}", opcodes[1]),
        0b00_010_111 => "rla".to_string(),

        0b00_011_000 => format!("jr\t{}", opcodes[1] as i8),
        0b00_011_001 => "add\thl, de".to_string(),
        0b00_011_010 => "ld\ta, (de)".to_string(),
        0b00_011_011 => "dec\tde".to_string(),
        0b00_011_100 => "inc\te".to_string(),
        0b00_011_101 => "dec\te".to_string(),
        0b00_011_110 => format!("ld\te, ${:02x}", opcodes[1]),
        0b00_011_111 => "rra".to_string(),

        0b00_100_000 => format!("jr\tnz, {}", opcodes[1] as i8),
        0b00_100_001 => format!("ld\thl, ${:02x}{:02x}", opcodes[2], opcodes[1]),
        0b00_100_010 => format!("ld\t(${:02x}{:02x}), hl", opcodes[2], opcodes[1]),
        0b00_100_011 => "inc\thl".to_string(),
        0b00_100_100 => "inc\th".to_string(),
        0b00_100_101 => "dec\th".to_string(),
        0b00_100_110 => format!("ld\th, ${:02x}", opcodes[1]),
        0b00_100_111 => "daa".to_string(),

        0b00_101_000 => format!("jr\tz, {}", opcodes[1] as i8),
        0b00_101_001 => "add\thl, hl".to_string(),
        0b00_101_010 => format!("ld\thl, (${:02x}{:02x})", opcodes[2], opcodes[1]),
        0b00_101_011 => "dec\thl".to_string(),
        0b00_101_100 => "inc\tl".to_string(),
        0b00_101_101 => "dec\tl".to_string(),
        0b00_101_110 => format!("ld\tl, ${:02x}", opcodes[1]),
        0b00_101_111 => "cpl".to_string(),

        0b00_110_000 => format!("jr\tnc, {}", opcodes[1] as i8),
        0b00_110_001 => format!("ld\tsp, ${:02x}{:02x}", opcodes[2], opcodes[1]),
        0b00_110_010 => format!("ld\t(${:02x}{:02x}), a", opcodes[2], opcodes[1]),
        0b00_110_011 => "inc\tsp".to_string(),
        0b00_110_100 => "inc\t(hl)".to_string(),
        0b00_110_101 => "dec\t(hl)".to_string(),
        0b00_110_110 => format!("ld\t(hl), ${:02x}", opcodes[1]),
        0b00_110_111 => "scf".to_string(),

        0b00_111_000 => format!("jr\tc, {}", opcodes[1] as i8),
        0b00_111_001 => "add\thl, sp".to_string(),
        0b00_111_010 => format!("ld\ta, (${:02x}{:02x})", opcodes[2], opcodes[1]),
        0b00_111_011 => "dec\tsp".to_string(),
        0b00_111_100 => "inc\ta".to_string(),
        0b00_111_101 => "dec\ta".to_string(),
        0b00_111_110 => format!("ld\ta, ${:02x}", opcodes[1]),
        0b00_111_111 => "ccf".to_string(),

        0b01_000_000 => "ld\tb, b".to_string(),
        0b01_000_001 => "ld\tb, c".to_string(),
        0b01_000_010 => "ld\tb, d".to_string(),
        0b01_000_011 => "ld\tb, e".to_string(),
        0b01_000_100 => "ld\tb, h".to_string(),
        0b01_000_101 => "ld\tb, l".to_string(),
        0b01_000_110 => "ld\tb, (hl)".to_string(),
        0b01_000_111 => "ld\tb, a".to_string(),

        0b01_001_000 => "ld\tc, b".to_string(),
        0b01_001_001 => "ld\tc, c".to_string(),
        0b01_001_010 => "ld\tc, d".to_string(),
        0b01_001_011 => "ld\tc, e".to_string(),
        0b01_001_100 => "ld\tc, h".to_string(),
        0b01_001_101 => "ld\tc, l".to_string(),
        0b01_001_110 => "ld\tc, (hl)".to_string(),
        0b01_001_111 => "ld\tc, a".to_string(),

        0b01_010_000 => "ld\td, b".to_string(),
        0b01_010_001 => "ld\td, c".to_string(),
        0b01_010_010 => "ld\td, d".to_string(),
        0b01_010_011 => "ld\td, e".to_string(),
        0b01_010_100 => "ld\td, h".to_string(),
        0b01_010_101 => "ld\td, l".to_string(),
        0b01_010_110 => "ld\td, (hl)".to_string(),
        0b01_010_111 => "ld\td, a".to_string(),

        0b01_011_000 => "ld\te, b".to_string(),
        0b01_011_001 => "ld\te, c".to_string(),
        0b01_011_010 => "ld\te, d".to_string(),
        0b01_011_011 => "ld\te, e".to_string(),
        0b01_011_100 => "ld\te, h".to_string(),
        0b01_011_101 => "ld\te, l".to_string(),
        0b01_011_110 => "ld\te, (hl)".to_string(),
        0b01_011_111 => "ld\te, a".to_string(),

        0b01_100_000 => "ld\th, b".to_string(),
        0b01_100_001 => "ld\th, c".to_string(),
        0b01_100_010 => "ld\th, d".to_string(),
        0b01_100_011 => "ld\th, e".to_string(),
        0b01_100_100 => "ld\th, h".to_string(),
        0b01_100_101 => "ld\th, l".to_string(),
        0b01_100_110 => "ld\th, (hl)".to_string(),
        0b01_100_111 => "ld\th, a".to_string(),

        0b01_101_000 => "ld\tl, b".to_string(),
        0b01_101_001 => "ld\tl, c".to_string(),
        0b01_101_010 => "ld\tl, d".to_string(),
        0b01_101_011 => "ld\tl, e".to_string(),
        0b01_101_100 => "ld\tl, h".to_string(),
        0b01_101_101 => "ld\tl, l".to_string(),
        0b01_101_110 => "ld\tl, (hl)".to_string(),
        0b01_101_111 => "ld\tl, a".to_string(),

        0b01_110_000 => "ld\t(hl), b".to_string(),
        0b01_110_001 => "ld\t(hl), c".to_string(),
        0b01_110_010 => "ld\t(hl), d".to_string(),
        0b01_110_011 => "ld\t(hl), e".to_string(),
        0b01_110_100 => "ld\t(hl), h".to_string(),
        0b01_110_101 => "ld\t(hl), l".to_string(),
        0b01_110_110 => "halt\t".to_string(),
        0b01_110_111 => "ld\t(hl), a".to_string(),

        0b01_111_000 => "ld\ta, b".to_string(),
        0b01_111_001 => "ld\ta, c".to_string(),
        0b01_111_010 => "ld\ta, d".to_string(),
        0b01_111_011 => "ld\ta, e".to_string(),
        0b01_111_100 => "ld\ta, h".to_string(),
        0b01_111_101 => "ld\ta, l".to_string(),
        0b01_111_110 => "ld\ta, (hl)".to_string(),
        0b01_111_111 => "ld\ta, a".to_string(),

        0b10_000_000 => "add\ta, b".to_string(),
        0b10_000_001 => "add\ta, c".to_string(),
        0b10_000_010 => "add\ta, d".to_string(),
        0b10_000_011 => "add\ta, e".to_string(),
        0b10_000_100 => "add\ta, h".to_string(),
        0b10_000_101 => "add\ta, l".to_string(),
        0b10_000_110 => "add\ta, (hl)".to_string(),
        0b10_000_111 => "add\ta, a".to_string(),

        0b10_001_000 => "add\ta, b".to_string(),
        0b10_001_001 => "adc\ta, c".to_string(),
        0b10_001_010 => "adc\ta, d".to_string(),
        0b10_001_011 => "adc\ta, e".to_string(),
        0b10_001_100 => "adc\ta, h".to_string(),
        0b10_001_101 => "adc\ta, l".to_string(),
        0b10_001_110 => "adc\ta, (hl)".to_string(),
        0b10_001_111 => "adc\ta, a".to_string(),

        0b10_010_000 => "sub\ta, b".to_string(),
        0b10_010_001 => "sub\ta, c".to_string(),
        0b10_010_010 => "sub\ta, d".to_string(),
        0b10_010_011 => "sub\ta, e".to_string(),
        0b10_010_100 => "sub\ta, h".to_string(),
        0b10_010_101 => "sub\ta, l".to_string(),
        0b10_010_110 => "sub\ta, (hl)".to_string(),
        0b10_010_111 => "sub\ta, a".to_string(),

        0b10_011_000 => "sbc\ta, b".to_string(),
        0b10_011_001 => "sbc\ta, c".to_string(),
        0b10_011_010 => "sbc\ta, d".to_string(),
        0b10_011_011 => "sbc\ta, e".to_string(),
        0b10_011_100 => "sbc\ta, h".to_string(),
        0b10_011_101 => "sbc\ta, l".to_string(),
        0b10_011_110 => "sbc\ta, (hl)".to_string(),
        0b10_011_111 => "sbc\ta, a".to_string(),

        0b10_100_000 => "and\tb".to_string(),
        0b10_100_001 => "and\tc".to_string(),
        0b10_100_010 => "and\td".to_string(),
        0b10_100_011 => "and\te".to_string(),
        0b10_100_100 => "and\th".to_string(),
        0b10_100_101 => "and\tl".to_string(),
        0b10_100_110 => "and\t(hl)".to_string(),
        0b10_100_111 => "and\ta".to_string(),

        0b10_101_000 => "xor\tb".to_string(),
        0b10_101_001 => "xor\tc".to_string(),
        0b10_101_010 => "xor\td".to_string(),
        0b10_101_011 => "xor\te".to_string(),
        0b10_101_100 => "xor\th".to_string(),
        0b10_101_101 => "xor\tl".to_string(),
        0b10_101_110 => "xor\t(hl)".to_string(),
        0b10_101_111 => "xor\ta".to_string(),

        0b10_110_000 => "or\tb".to_string(),
        0b10_110_001 => "or\tc".to_string(),
        0b10_110_010 => "or\td".to_string(),
        0b10_110_011 => "or\te".to_string(),
        0b10_110_100 => "or\th".to_string(),
        0b10_110_101 => "or\tl".to_string(),
        0b10_110_110 => "or\tahl)".to_string(),
        0b10_110_111 => "or\ta".to_string(),

        // CP A, g
        0b10_111_000 => "cp\tb".to_string(),
        0b10_111_001 => "cp\tc".to_string(),
        0b10_111_010 => "cp\td".to_string(),
        0b10_111_011 => "cp\te".to_string(),
        0b10_111_100 => "cp\th".to_string(),
        0b10_111_101 => "cp\tl".to_string(),
        0b10_111_110 => "cp\t(hl)".to_string(),
        0b10_111_111 => "cp\ta".to_string(),

        0b11_000_000 => "ret\tnz".to_string(),
        0b11_000_001 => "pop\tbc".to_string(),
        0b11_000_010 => format!("jp\tnz, ${:02x}{:02x}", opcodes[2], opcodes[1]),
        0b11_000_011 => format!("jp\t${:02x}{:02x}", opcodes[2], opcodes[1]),
        0b11_000_100 => format!("call\tnz, ${:02x}{:02x}", opcodes[2], opcodes[1]),
        0b11_000_101 => "push\tbc".to_string(),
        0b11_000_110 => format!("add\ta, ${:02x}", opcodes[1]),
        0b11_000_111 => "rstt$00".to_string(),

        0b11_001_000 => "ret\tz".to_string(),
        0b11_001_001 => "ret".to_string(),
        0b11_001_010 => format!("jp\tz, ${:02x}{:02x}", opcodes[2], opcodes[1]),
        0b11_001_011 => bits(&opcodes[1..]),
        0b11_001_100 => format!("call\tz, ${:02x}{:02x}", opcodes[2], opcodes[1]),
        0b11_001_101 => format!("call\t${:02x}{:02x}", opcodes[2], opcodes[1]),
        0b11_001_110 => format!("adc\ta, ${:02x}", opcodes[1]),
        0b11_001_111 => "rst\t$08".to_string(),

        0b11_010_000 => "ret\tnc".to_string(),
        0b11_010_001 => "pop\tde".to_string(),
        0b11_010_010 => format!("jp\tnc, ${:02x}{:02x}", opcodes[2], opcodes[1]),
        0b11_010_011 => format!("out\t(${:02x}, a", opcodes[1]),
        0b11_010_100 => format!("call\tnc, ${:02x}{:02x}", opcodes[2], opcodes[1]),
        0b11_010_101 => "push\tde".to_string(),
        0b11_010_110 => format!("sub\t${:02x}", opcodes[1]),
        0b11_010_111 => "rst\t$10".to_string(),

        0b11_011_000 => "ret\tc".to_string(),
        0b11_011_001 => "exx".to_string(),
        0b11_011_010 => format!("jp\tc, ${:02x}{:02x}", opcodes[2], opcodes[1]),
        0b11_011_011 => format!("in\ta, (${:02x}", opcodes[1]),
        0b11_011_100 => format!("call\tc, ${:02x}{:02x}", opcodes[2], opcodes[1]),
        0b11_011_101 => index(&opcodes[1..], "ix"),
        0b11_011_110 => format!("sbc\ta, ${:02x}", opcodes[1]),
        0b11_011_111 => "rst\t$18".to_string(),

        0b11_100_000 => "ret\tpo".to_string(),
        0b11_100_001 => "pop\thl".to_string(),
        0b11_100_010 => format!("jp\tpo, ${:02x}{:02x}", opcodes[2], opcodes[1]),
        0b11_100_011 => "ex\t(sp), hl".to_string(),
        0b11_100_100 => format!("call\tpo, ${:02x}{:02x}", opcodes[2], opcodes[1]),
        0b11_100_101 => "push\thl".to_string(),
        0b11_100_110 => format!("and\t${:02x}", opcodes[1]),
        0b11_100_111 => "rst\t$20".to_string(),

        0b11_101_000 => "ret\tpe".to_string(),
        0b11_101_001 => "jp\t(hl)".to_string(),
        0b11_101_010 => format!("jp\tpe, ${:02x}{:02x}", opcodes[2], opcodes[1]),
        0b11_101_011 => "ex\tde, hl".to_string(),
        0b11_101_100 => format!("call\tpe, ${:02x}{:02x}", opcodes[2], opcodes[1]),
        0b11_101_101 => extended(&opcodes[1..]),
        0b11_101_110 => format!("xor\t${:02x}", opcodes[1]),
        0b11_101_111 => "rst\t$28".to_string(),

        0b11_110_000 => "ret\tp".to_string(),
        0b11_110_001 => "pop\taf".to_string(),
        0b11_110_010 => format!("jp\tp, ${:02x}{:02x}", opcodes[2], opcodes[1]),
        0b11_110_011 => "di\t".to_string(),
        0b11_110_100 => format!("call\tp, ${:02x}{:02x}", opcodes[2], opcodes[1]),
        0b11_110_101 => "push\taf".to_string(),
        0b11_110_110 => format!("or\t${:02x}", opcodes[1]),
        0b11_110_111 => "rst\t$30".to_string(),

        0b11_111_000 => "ret\tm".to_string(),
        0b11_111_001 => "ld\tsp, hl".to_string(),
        0b11_111_010 => format!("jp\tm, ${:02x}{:02x}", opcodes[2], opcodes[1]),
        0b11_111_011 => "ei\t".to_string(),
        0b11_111_100 => format!("call\tm, ${:02x}{:02x}", opcodes[2], opcodes[1]),
        0b11_111_101 => index(&opcodes[1..], "iy"),
        0b11_111_110 => format!("cp\t${:02x}", opcodes[1]),
        0b11_111_111 => "rst\t$38".to_string(),
    }
}

fn extended(opcodes: &[u8]) -> String {
    match opcodes[0] {
        0b00_000_000 => format!("in0\t(${:02x}), b", opcodes[1]),
        0b00_001_000 => format!("in0\t(${:02x}), c", opcodes[1]),
        0b00_010_000 => format!("in0\t(${:02x}), d", opcodes[1]),
        0b00_011_000 => format!("in0\t(${:02x}), e", opcodes[1]),
        0b00_100_000 => format!("in0\t(${:02x}), h", opcodes[1]),
        0b00_101_000 => format!("in0\t(${:02x}), l", opcodes[1]),
        0b00_111_000 => format!("in0\t(${:02x}), a", opcodes[1]),

        0b00_000_001 => format!("out0\t(${:02x}), b", opcodes[1]),
        0b00_001_001 => format!("out0\t(${:02x}), c", opcodes[1]),
        0b00_010_001 => format!("out0\t(${:02x}), d", opcodes[1]),
        0b00_011_001 => format!("out0\t(${:02x}), e", opcodes[1]),
        0b00_100_001 => format!("out0\t(${:02x}), h", opcodes[1]),
        0b00_101_001 => format!("out0\t(${:02x}), l", opcodes[1]),
        0b00_111_001 => format!("out0\t(${:02x}), a", opcodes[1]),

        0b00_000_100 => format!("tst\tb"),
        0b00_001_100 => format!("tst\tc"),
        0b00_010_100 => format!("tst\td"),
        0b00_011_100 => format!("tst\te"),
        0b00_100_100 => format!("tst\th"),
        0b00_101_100 => format!("tst\tl"),
        0b00_110_100 => format!("tst\t(hl)"),
        0b00_111_100 => format!("tst\ta"),
        0b01_100_100 => format!("tst\t{:08b}b", opcodes[1]),

        0b01_001_101 => "reti".to_string(),

        0b01_000_100 => "neg".to_string(),

        0b01_000_010 => "sbc\thl, bc".to_string(),
        0b01_010_010 => "sbc\thl, de".to_string(),
        0b01_100_010 => "sbc\thl, hl".to_string(),
        0b01_110_010 => "sbc\thl, sp".to_string(),

        0b01_000_011 => format!("ld\t(${:02x}{:02x}), bc", opcodes[2], opcodes[1]),
        0b01_010_011 => format!("ld\t(${:02x}{:02x}), de", opcodes[2], opcodes[1]),

        0b01_001_011 => format!("ld\tbc, (${:02x}{:02x})", opcodes[2], opcodes[1]),
        0b01_011_011 => format!("ld\tde, (${:02x}{:02x})", opcodes[2], opcodes[1]),

        0b01_110_011 => format!("ld\t(${:02x}{:02x}), sp", opcodes[2], opcodes[1]),
        0b01_111_011 => format!("ld\tsp, (${:02x}{:02x})", opcodes[2], opcodes[1]),

        0b01_100_111 => "rrd".to_string(),
        0b01_101_111 => "rld".to_string(),

        0b10_100_000 => "ldi".to_string(),
        0b10_110_000 => "ldir".to_string(),

        0b10_100_001 => "cpi".to_string(),
        0b10_110_001 => "cpir".to_string(),

        0b10_100_010 => "ini".to_string(),
        0b10_110_010 => "inir".to_string(),

        0b10_100_011 => "outi".to_string(),
        0b10_110_011 => "outir".to_string(),

        0b10_101_000 => "ldd".to_string(),
        0b10_111_000 => "lddr".to_string(),

        0b10_101_001 => "cpd".to_string(),
        0b10_111_001 => "cpdr".to_string(),

        0b10_101_010 => "ind".to_string(),
        0b10_111_010 => "indr".to_string(),

        0b10_101_011 => "outd".to_string(),
        0b10_111_011 => "outdr".to_string(),

        _ => format!("extd\t${:02x}", opcodes[0]),
    }
}

fn bits(opcodes: &[u8]) -> String {
    match opcodes[0] {
        // RLC g/(HL)
        0b00_000_000 => "rlc\tb".to_string(),
        0b00_000_001 => "rlc\tc".to_string(),
        0b00_000_010 => "rlc\td".to_string(),
        0b00_000_011 => "rlc\te".to_string(),
        0b00_000_100 => "rlc\th".to_string(),
        0b00_000_101 => "rlc\tl".to_string(),
        0b00_000_110 => "rlc\t(hl)".to_string(),
        0b00_000_111 => "rlc\ta".to_string(),

        // RRC g/(HL)
        0b00_001_000 => "rrc\tb".to_string(),
        0b00_001_001 => "rrc\tc".to_string(),
        0b00_001_010 => "rrc\td".to_string(),
        0b00_001_011 => "rrc\te".to_string(),
        0b00_001_100 => "rrc\th".to_string(),
        0b00_001_101 => "rrc\tl".to_string(),
        0b00_001_110 => "rrc\t(hl)".to_string(),
        0b00_001_111 => "rrc\ta".to_string(),

        // RL g/(HL)
        0b00_010_000 => "rl\tb".to_string(),
        0b00_010_001 => "rl\tc".to_string(),
        0b00_010_010 => "rl\td".to_string(),
        0b00_010_011 => "rl\te".to_string(),
        0b00_010_100 => "rl\th".to_string(),
        0b00_010_101 => "rl\tl".to_string(),
        0b00_010_110 => "rl\t(hl)".to_string(),
        0b00_010_111 => "rl\ta".to_string(),

        // RR g/(HL)
        0b00_011_000 => "rr\tb".to_string(),
        0b00_011_001 => "rr\tc".to_string(),
        0b00_011_010 => "rr\td".to_string(),
        0b00_011_011 => "rr\te".to_string(),
        0b00_011_100 => "rr\th".to_string(),
        0b00_011_101 => "rr\tl".to_string(),
        0b00_011_110 => "rr\t(hl)".to_string(),
        0b00_011_111 => "rr\ta".to_string(),

        // SLA g/(HL)
        0b00_100_000 => "sla\tb".to_string(),
        0b00_100_001 => "sla\tc".to_string(),
        0b00_100_010 => "sla\td".to_string(),
        0b00_100_011 => "sla\te".to_string(),
        0b00_100_100 => "sla\th".to_string(),
        0b00_100_101 => "sla\tl".to_string(),
        0b00_100_110 => "sla\t(hl)".to_string(),
        0b00_100_111 => "sla\ta".to_string(),

        // SRA g/(HL)
        0b00_101_000 => "sra\tb".to_string(),
        0b00_101_001 => "sra\tc".to_string(),
        0b00_101_010 => "sra\td".to_string(),
        0b00_101_011 => "sra\te".to_string(),
        0b00_101_100 => "sra\th".to_string(),
        0b00_101_101 => "sra\tl".to_string(),
        0b00_101_110 => "sra\t(hl)".to_string(),
        0b00_101_111 => "sra\ta".to_string(),

        // SLL g/(HL)
        0b00_110_000 => "sll!\tb".to_string(),
        0b00_110_001 => "sll!\tc".to_string(),
        0b00_110_010 => "sll!\td".to_string(),
        0b00_110_011 => "sll!\te".to_string(),
        0b00_110_100 => "sll!\th".to_string(),
        0b00_110_101 => "sll!\tl".to_string(),
        0b00_110_110 => "sll!\t(hl)".to_string(),
        0b00_110_111 => "sll!\ta".to_string(),

        // SRA g/(HL)
        0b00_111_000 => "srl\tb".to_string(),
        0b00_111_001 => "srl\tc".to_string(),
        0b00_111_010 => "srl\td".to_string(),
        0b00_111_011 => "srl\te".to_string(),
        0b00_111_100 => "srl\th".to_string(),
        0b00_111_101 => "srl\tl".to_string(),
        0b00_111_110 => "srl\t(hl)".to_string(),
        0b00_111_111 => "srl\ta".to_string(),

        _ => format!("bits\t${:02x}", opcodes[0]),
    }
}

// Index register opcodes. The opcode sets are identical for IX and IY.
fn index(opcodes: &[u8], reg: &str) -> String {
    match opcodes[0] {
        0b00_001_001 => format!("add\t{}, bc", reg),
        0b00_011_001 => format!("add\t{}, de", reg),
        0b00_101_001 => format!("add\t{}, {}", reg, reg),
        0b00_111_001 => format!("add\t{}, sp", reg),

        0b00_100_011 => format!("inc\t{}", reg),
        0b00_101_011 => format!("dec\t{}", reg),

        0b00_100_001 => format!("ld\t{}, ${:02x}{:02x}", reg, opcodes[2], opcodes[1]),
        0b00_100_010 => format!("ld\t(${:02x}{:02x}), {}", opcodes[2], opcodes[1], reg),
        0b00_101_010 => format!("ld\t{}, (${:02x}{:02x})", reg, opcodes[2], opcodes[1]),

        0b00_110_100 => format!("inc\t({}+{})", reg, opcodes[1]),
        0b00_110_101 => format!("dec\t({}+{})", reg, opcodes[1]),

        0b01_000_110 => format!("ld\tb, ({}+{})", reg, opcodes[1]),
        0b01_001_110 => format!("ld\tc, ({}+{})", reg, opcodes[1]),
        0b01_010_110 => format!("ld\td, ({}+{})", reg, opcodes[1]),
        0b01_011_110 => format!("ld\te, ({}+{})", reg, opcodes[1]),
        0b01_100_110 => format!("ld\th, ({}+{})", reg, opcodes[1]),
        0b01_101_110 => format!("ld\tl, ({}+{})", reg, opcodes[1]),
        0b01_111_110 => format!("ld\ta, ({}+{})", reg, opcodes[1]),

        0b01_110_000 => format!("ld\t({}+{}), b", reg, opcodes[1]),
        0b01_110_001 => format!("ld\t({}+{}), c", reg, opcodes[1]),
        0b01_110_010 => format!("ld\t({}+{}), d", reg, opcodes[1]),
        0b01_110_011 => format!("ld\t({}+{}), e", reg, opcodes[1]),
        0b01_110_100 => format!("ld\t({}+{}), h", reg, opcodes[1]),
        0b01_110_101 => format!("ld\t({}+{}), l", reg, opcodes[1]),
        0b01_110_111 => format!("ld\t({}+{}), a", reg, opcodes[1]),

        0b11_001_011 => index_bits(&opcodes[1..], reg),

        _ => format!("index\t{}, ${:02x}", reg, opcodes[0]),
    }
}

fn index_bits(opcodes: &[u8], reg: &str) -> String {
    match opcodes[1] {
        0b00_000_110 => format!("rlc\t({}+{})", reg, opcodes[0]),
        0b00_001_110 => format!("rrc\t({}+{})", reg, opcodes[0]),
        0b00_010_110 => format!("rl\t({}+{})", reg, opcodes[0]),
        0b00_011_110 => format!("rr\t({}+{})", reg, opcodes[0]),
        0b00_100_110 => format!("sla\t({}+{})", reg, opcodes[0]),
        0b00_101_110 => format!("sra\t({}+{})", reg, opcodes[0]),
        0b00_110_110 => format!("sll!\t({}+{})", reg, opcodes[0]),
        0b00_111_110 => format!("srl\t({}+{})", reg, opcodes[0]),

        0b01_000_110 => format!("bit\t0, ({}+{})", reg, opcodes[0]),
        0b01_001_110 => format!("bit\t1, ({}+{})", reg, opcodes[0]),
        0b01_010_110 => format!("bit\t2, ({}+{})", reg, opcodes[0]),
        0b01_011_110 => format!("bit\t3, ({}+{})", reg, opcodes[0]),
        0b01_100_110 => format!("bit\t4, ({}+{})", reg, opcodes[0]),
        0b01_101_110 => format!("bit\t5, ({}+{})", reg, opcodes[0]),
        0b01_110_110 => format!("bit\t6, ({}+{})", reg, opcodes[0]),
        0b01_111_110 => format!("bit\t7, ({}+{})", reg, opcodes[0]),

        0b10_000_110 => format!("res\t0,({}+{})", reg, opcodes[0]),
        0b10_001_110 => format!("res\t1,({}+{})", reg, opcodes[0]),
        0b10_010_110 => format!("res\t2,({}+{})", reg, opcodes[0]),
        0b10_011_110 => format!("res\t3,({}+{})", reg, opcodes[0]),
        0b10_100_110 => format!("res\t4,({}+{})", reg, opcodes[0]),
        0b10_101_110 => format!("res\t5,({}+{})", reg, opcodes[0]),
        0b10_110_110 => format!("res\t6,({}+{})", reg, opcodes[0]),
        0b10_111_110 => format!("res\t7,({}+{})", reg, opcodes[0]),

        0b11_000_110 => format!("set\t0, ({}+{})", reg, opcodes[0]),
        0b11_001_110 => format!("set\t1, ({}+{})", reg, opcodes[0]),
        0b11_010_110 => format!("set\t2, ({}+{})", reg, opcodes[0]),
        0b11_011_110 => format!("set\t3, ({}+{})", reg, opcodes[0]),
        0b11_100_110 => format!("set\t4, ({}+{})", reg, opcodes[0]),
        0b11_101_110 => format!("set\t5, ({}+{})", reg, opcodes[0]),
        0b11_110_110 => format!("set\t6, ({}+{})", reg, opcodes[0]),
        0b11_111_110 => format!("set\t7, ({}+{})", reg, opcodes[0]),

        _ => format!("index bits\t{}, ${:02x}", reg, opcodes[1]),
    }
}
