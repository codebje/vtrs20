use crate::bus::Bus;
use crate::cpu::*;

impl CPU {
    // Fetch, decode, dispatch.
    pub(super) fn dispatch(&mut self, bus: &mut Bus) {
        let opcode = bus.mem_read(self.mmu.to_physical(self.sr.pc));
        self.sr.pc += 1;

        // The full 256 opcode values are listed explicitly to allow a jump table to be
        // generated. It would be possible to use bitmasks to reduce the size of this list,
        // but doing so would significantly reduce the efficiency of the dispatcher.
        match opcode {
            0b00_000_000 => self.nop(),
            0b00_000_001 => self.ld_ww_mn(bus, RegW::BC),
            0b00_000_010 => self.ld_indirect_a(bus, Register::BC),
            0b00_000_011 => self.inc_ww(RegW::BC),
            0b00_000_100 => self.inc_ghl(bus, RegGHL::B),
            0b00_000_101 => self.error(),
            0b00_000_110 => self.ld_ghl_m(bus, RegGHL::B),
            0b00_000_111 => self.error(),

            0b00_001_000 => self.error(),
            0b00_001_001 => self.add_hl_ww(RegW::BC),
            0b00_001_010 => self.error(),
            0b00_001_011 => self.error(),
            0b00_001_100 => self.inc_ghl(bus, RegGHL::C),
            0b00_001_101 => self.error(),
            0b00_001_110 => self.ld_ghl_m(bus, RegGHL::C),
            0b00_001_111 => self.error(),

            0b00_010_000 => self.error(),
            0b00_010_001 => self.ld_ww_mn(bus, RegW::DE),
            0b00_010_010 => self.ld_indirect_a(bus, Register::DE),
            0b00_010_011 => self.inc_ww(RegW::DE),
            0b00_010_100 => self.inc_ghl(bus, RegGHL::D),
            0b00_010_101 => self.error(),
            0b00_010_110 => self.ld_ghl_m(bus, RegGHL::D),
            0b00_010_111 => self.error(),

            0b00_011_000 => self.error(),
            0b00_011_001 => self.add_hl_ww(RegW::DE),
            0b00_011_010 => self.error(),
            0b00_011_011 => self.error(),
            0b00_011_100 => self.inc_ghl(bus, RegGHL::E),
            0b00_011_101 => self.error(),
            0b00_011_110 => self.ld_ghl_m(bus, RegGHL::E),
            0b00_011_111 => self.error(),

            0b00_100_000 => self.error(),
            0b00_100_001 => self.ld_ww_mn(bus, RegW::HL),
            0b00_100_010 => self.error(),
            0b00_100_011 => self.inc_ww(RegW::HL),
            0b00_100_100 => self.inc_ghl(bus, RegGHL::H),
            0b00_100_101 => self.error(),
            0b00_100_110 => self.ld_ghl_m(bus, RegGHL::H),
            0b00_100_111 => self.error(),

            0b00_101_000 => self.error(),
            0b00_101_001 => self.add_hl_ww(RegW::HL),
            0b00_101_010 => self.error(),
            0b00_101_011 => self.error(),
            0b00_101_100 => self.inc_ghl(bus, RegGHL::L),
            0b00_101_101 => self.error(),
            0b00_101_110 => self.ld_ghl_m(bus, RegGHL::L),
            0b00_101_111 => self.error(),

            0b00_110_000 => self.error(),
            0b00_110_001 => self.ld_ww_mn(bus, RegW::SP),
            0b00_110_010 => self.error(),
            0b00_110_011 => self.inc_ww(RegW::SP),
            0b00_110_100 => self.inc_ghl(bus, RegGHL::HL),
            0b00_110_101 => self.error(),
            0b00_110_110 => self.ld_ghl_m(bus, RegGHL::HL),
            0b00_110_111 => self.error(),

            0b00_111_000 => self.error(),
            0b00_111_001 => self.add_hl_ww(RegW::SP),
            0b00_111_010 => self.error(),
            0b00_111_011 => self.error(),
            0b00_111_100 => self.inc_ghl(bus, RegGHL::A),
            0b00_111_101 => self.error(),
            0b00_111_110 => self.ld_ghl_m(bus, RegGHL::A),
            0b00_111_111 => self.error(),

            0b01_000_000 => self.error(),
            0b01_000_001 => self.error(),
            0b01_000_010 => self.error(),
            0b01_000_011 => self.error(),
            0b01_000_100 => self.error(),
            0b01_000_101 => self.error(),
            0b01_000_110 => self.error(),
            0b01_000_111 => self.error(),

            0b01_001_000 => self.error(),
            0b01_001_001 => self.error(),
            0b01_001_010 => self.error(),
            0b01_001_011 => self.error(),
            0b01_001_100 => self.error(),
            0b01_001_101 => self.error(),
            0b01_001_110 => self.error(),
            0b01_001_111 => self.error(),

            0b01_010_000 => self.error(),
            0b01_010_001 => self.error(),
            0b01_010_010 => self.error(),
            0b01_010_011 => self.error(),
            0b01_010_100 => self.error(),
            0b01_010_101 => self.error(),
            0b01_010_110 => self.error(),
            0b01_010_111 => self.error(),

            0b01_011_000 => self.error(),
            0b01_011_001 => self.error(),
            0b01_011_010 => self.error(),
            0b01_011_011 => self.error(),
            0b01_011_100 => self.error(),
            0b01_011_101 => self.error(),
            0b01_011_110 => self.error(),
            0b01_011_111 => self.error(),

            0b01_100_000 => self.error(),
            0b01_100_001 => self.error(),
            0b01_100_010 => self.error(),
            0b01_100_011 => self.error(),
            0b01_100_100 => self.error(),
            0b01_100_101 => self.error(),
            0b01_100_110 => self.error(),
            0b01_100_111 => self.error(),

            0b01_101_000 => self.error(),
            0b01_101_001 => self.error(),
            0b01_101_010 => self.error(),
            0b01_101_011 => self.error(),
            0b01_101_100 => self.error(),
            0b01_101_101 => self.error(),
            0b01_101_110 => self.error(),
            0b01_101_111 => self.error(),

            0b01_110_000 => self.error(),
            0b01_110_001 => self.error(),
            0b01_110_010 => self.error(),
            0b01_110_011 => self.error(),
            0b01_110_100 => self.error(),
            0b01_110_101 => self.error(),
            0b01_110_110 => self.error(),
            0b01_110_111 => self.error(),

            0b01_111_000 => self.error(),
            0b01_111_001 => self.error(),
            0b01_111_010 => self.error(),
            0b01_111_011 => self.error(),
            0b01_111_100 => self.error(),
            0b01_111_101 => self.error(),
            0b01_111_110 => self.error(),
            0b01_111_111 => self.error(),

            //0b10_000_000 => self.add_a_ghl(bus, RegGHL::B),
            //0b10_000_001 => self.add_a_ghl(bus, RegGHL::C),
            //0b10_000_010 => self.add_a_ghl(bus, RegGHL::D),
            //0b10_000_011 => self.add_a_ghl(bus, RegGHL::E),
            //0b10_000_100 => self.add_a_ghl(bus, RegGHL::H),
            //0b10_000_101 => self.add_a_ghl(bus, RegGHL::L),
            //0b10_000_110 => self.add_a_ghl(bus, RegGHL::HL),
            //0b10_000_111 => self.add_a_ghl(bus, RegGHL::A),
            0b10_000_000 => self.add_a(bus, Addressing::Direct(Register::B), false),
            0b10_000_001 => self.add_a(bus, Addressing::Direct(Register::C), false),
            0b10_000_010 => self.add_a(bus, Addressing::Direct(Register::D), false),
            0b10_000_011 => self.add_a(bus, Addressing::Direct(Register::E), false),
            0b10_000_100 => self.add_a(bus, Addressing::Direct(Register::H), false),
            0b10_000_101 => self.add_a(bus, Addressing::Direct(Register::L), false),
            0b10_000_110 => self.add_a(bus, Addressing::Indirect(RegIndirect::HL), false),
            0b10_000_111 => self.add_a(bus, Addressing::Direct(Register::A), false),

            //0b10_001_000 => self.adc_a_ghl(bus, RegGHL::B),
            //0b10_001_001 => self.adc_a_ghl(bus, RegGHL::C),
            //0b10_001_010 => self.adc_a_ghl(bus, RegGHL::D),
            //0b10_001_011 => self.adc_a_ghl(bus, RegGHL::E),
            //0b10_001_100 => self.adc_a_ghl(bus, RegGHL::H),
            //0b10_001_101 => self.adc_a_ghl(bus, RegGHL::L),
            //0b10_001_110 => self.adc_a_ghl(bus, RegGHL::HL),
            //0b10_001_111 => self.adc_a_ghl(bus, RegGHL::A),
            0b10_001_000 => self.add_a(bus, Addressing::Direct(Register::B), true),
            0b10_001_001 => self.add_a(bus, Addressing::Direct(Register::C), true),
            0b10_001_010 => self.add_a(bus, Addressing::Direct(Register::D), true),
            0b10_001_011 => self.add_a(bus, Addressing::Direct(Register::E), true),
            0b10_001_100 => self.add_a(bus, Addressing::Direct(Register::H), true),
            0b10_001_101 => self.add_a(bus, Addressing::Direct(Register::L), true),
            0b10_001_110 => self.add_a(bus, Addressing::Indirect(RegIndirect::HL), true),
            0b10_001_111 => self.add_a(bus, Addressing::Direct(Register::A), true),

            0b10_010_000 => self.sub_a(bus, Addressing::Direct(Register::B), false),
            0b10_010_001 => self.sub_a(bus, Addressing::Direct(Register::C), false),
            0b10_010_010 => self.sub_a(bus, Addressing::Direct(Register::D), false),
            0b10_010_011 => self.sub_a(bus, Addressing::Direct(Register::E), false),
            0b10_010_100 => self.sub_a(bus, Addressing::Direct(Register::H), false),
            0b10_010_101 => self.sub_a(bus, Addressing::Direct(Register::L), false),
            0b10_010_110 => self.sub_a(bus, Addressing::Indirect(RegIndirect::HL), false),
            0b10_010_111 => self.sub_a(bus, Addressing::Direct(Register::A), false),

            0b10_011_000 => self.sub_a(bus, Addressing::Direct(Register::B), true),
            0b10_011_001 => self.sub_a(bus, Addressing::Direct(Register::C), true),
            0b10_011_010 => self.sub_a(bus, Addressing::Direct(Register::D), true),
            0b10_011_011 => self.sub_a(bus, Addressing::Direct(Register::E), true),
            0b10_011_100 => self.sub_a(bus, Addressing::Direct(Register::H), true),
            0b10_011_101 => self.sub_a(bus, Addressing::Direct(Register::L), true),
            0b10_011_110 => self.sub_a(bus, Addressing::Indirect(RegIndirect::HL), true),
            0b10_011_111 => self.sub_a(bus, Addressing::Direct(Register::A), true),

            0b10_100_000 => self.and_a_ghl(bus, RegGHL::B),
            0b10_100_001 => self.and_a_ghl(bus, RegGHL::C),
            0b10_100_010 => self.and_a_ghl(bus, RegGHL::D),
            0b10_100_011 => self.and_a_ghl(bus, RegGHL::E),
            0b10_100_100 => self.and_a_ghl(bus, RegGHL::H),
            0b10_100_101 => self.and_a_ghl(bus, RegGHL::L),
            0b10_100_110 => self.and_a_ghl(bus, RegGHL::HL),
            0b10_100_111 => self.and_a_ghl(bus, RegGHL::A),

            0b10_101_000 => self.error(),
            0b10_101_001 => self.error(),
            0b10_101_010 => self.error(),
            0b10_101_011 => self.error(),
            0b10_101_100 => self.error(),
            0b10_101_101 => self.error(),
            0b10_101_110 => self.error(),
            0b10_101_111 => self.error(),

            0b10_110_000 => self.error(),
            0b10_110_001 => self.error(),
            0b10_110_010 => self.error(),
            0b10_110_011 => self.error(),
            0b10_110_100 => self.error(),
            0b10_110_101 => self.error(),
            0b10_110_110 => self.error(),
            0b10_110_111 => self.error(),

            0b10_111_000 => self.error(),
            0b10_111_001 => self.error(),
            0b10_111_010 => self.error(),
            0b10_111_011 => self.error(),
            0b10_111_100 => self.error(),
            0b10_111_101 => self.error(),
            0b10_111_110 => self.error(),
            0b10_111_111 => self.error(),

            0b11_000_000 => self.error(),
            0b11_000_001 => self.error(),
            0b11_000_010 => self.error(),
            0b11_000_011 => self.jp(bus),
            0b11_000_100 => self.error(),
            0b11_000_101 => self.error(),
            0b11_000_110 => self.add_a(bus, Addressing::Immediate(), false),
            0b11_000_111 => self.error(),

            0b11_001_000 => self.error(),
            0b11_001_001 => self.error(),
            0b11_001_010 => self.error(),
            0b11_001_011 => self.error(),
            0b11_001_100 => self.error(),
            0b11_001_101 => self.error(),
            0b11_001_110 => self.add_a(bus, Addressing::Immediate(), true),
            0b11_001_111 => self.error(),

            0b11_010_000 => self.error(),
            0b11_010_001 => self.error(),
            0b11_010_010 => self.error(),
            0b11_010_011 => self.error(),
            0b11_010_100 => self.error(),
            0b11_010_101 => self.error(),
            0b11_010_110 => self.sub_a(bus, Addressing::Immediate(), false),
            0b11_010_111 => self.error(),

            0b11_011_000 => self.error(),
            0b11_011_001 => self.error(),
            0b11_011_010 => self.error(),
            0b11_011_011 => self.error(),
            0b11_011_100 => self.error(),
            0b11_011_101 => self.error(),
            0b11_011_110 => self.sub_a(bus, Addressing::Immediate(), true),
            0b11_011_111 => self.error(),

            0b11_100_000 => self.error(),
            0b11_100_001 => self.error(),
            0b11_100_010 => self.error(),
            0b11_100_011 => self.error(),
            0b11_100_100 => self.error(),
            0b11_100_101 => self.error(),
            0b11_100_110 => self.and_a_m(bus),
            0b11_100_111 => self.error(),

            0b11_101_000 => self.error(),
            0b11_101_001 => self.error(),
            0b11_101_010 => self.error(),
            0b11_101_011 => self.error(),
            0b11_101_100 => self.error(),
            0b11_101_101 => self.extended(bus),
            0b11_101_110 => self.error(),
            0b11_101_111 => self.error(),

            0b11_110_000 => self.error(),
            0b11_110_001 => self.error(),
            0b11_110_010 => self.error(),
            0b11_110_011 => self.error(),
            0b11_110_100 => self.error(),
            0b11_110_101 => self.error(),
            0b11_110_110 => self.error(),
            0b11_110_111 => self.error(),

            0b11_111_000 => self.error(),
            0b11_111_001 => self.error(),
            0b11_111_010 => self.error(),
            0b11_111_011 => self.error(),
            0b11_111_100 => self.error(),
            0b11_111_101 => self.error(),
            0b11_111_110 => self.error(),
            0b11_111_111 => self.error(),
            //x if x & 0b11_000_111 == 0b00_000_101 => self.dec_g(bus, (x & 0b00_111_000) >> 3),
        }
    }

    // Extended instructions. Again, only constant expressions are used to allow a lookup table.
    // Unlike the basic opcode set the $ED group isn't complete, so there is a default entry.
    fn extended(&mut self, bus: &mut Bus) {
        let opcode = bus.mem_read(self.mmu.to_physical(self.sr.pc + 1));
        match opcode {
            0b00_000_001 => self.out0(bus, RegG::B),
            0b00_001_001 => self.out0(bus, RegG::C),
            0b00_010_001 => self.out0(bus, RegG::D),
            0b00_011_001 => self.out0(bus, RegG::E),
            0b00_100_001 => self.out0(bus, RegG::H),
            0b00_101_001 => self.out0(bus, RegG::L),
            0b00_111_001 => self.out0(bus, RegG::A),
            _ => self.error(),
        }
    }
}
